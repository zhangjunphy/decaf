* L2
** 1. What is the main job of a compiler?
   Transform one kind of program representation into another.
***  What is the input to a compiler?
    High-level programming language.
*** What does the compiler produce as output?
    Low-level assembly instructions.

* L3
** 1
*** Q:
Consider the language of binary strings defined by the following regular expression:

=(10)∗01(10)∗(0|1)=

Which of these strings are accepted by this expression? (Circle all that apply, if any).
#+begin_example
10011
0110101
01
1010010
10011001
#+end_example
*** A:
#+begin_example
10011
0110101
1010010
#+end_example

** 2
*** Q:
Give a regular expression which accepts the language of all binary
strings which end in 1 and whose length is a positive multiple of 3.
*** A:
=((0|1){3})*(0|1){2}1=

** 3
*** Q:
Does the regular expression

=[+|−](0|1|...|9)∗[.](0|1|...|9)∗=

recognize the language of decimal numbers? Why or why not?
*** A:
Not strictly. It can match all decimal numbers. But it also accepts =-.= or =000=,
which are generally not considered decimal numbers.

* L4
** 1
(a|b)(c|d)
a(c|d)
ac

(a|b)(c|d)
b(c|d)
bc

** 2
Yes.
There is a finite number of strings in this language. Define them as the terminal set.

If this is the set of all matching pairs, then regular language has no way to guarantee number of parentheses
are matched.

** 3
Yes.

Expr = ()
Expr = (Expr)

* L5

* L6
** 1
stack:
ID
(
ID

input:
, ID )

** 2
The first "ID" in the parentheses could reduce to an 'expr' or an 'parameter',
both would produce a valid parse tree.

** 3
Pros:
The program could become more expressive, useful in some special situations.
Cons:
Program behavior would be difficult to control.
* L7
** 1
I = Closure({T -> T * · F}) =
    {
        T -> T * · F,
        F -> · ( E ),
        F -> · x
    }

Goto(I, F) =
    {
        T -> T * F ·
    }

** 2
Transition to another state with a terminal in the DFA is a shift in the parse table.
For a non-terminal in the DFA, it is a goto.
